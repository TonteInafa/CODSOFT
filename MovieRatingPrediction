
# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error, r2_score
from google.colab import files
from sklearn.ensemble import RandomForestRegressor
import time


# Step 1: Upload the dataset
uploaded = files.upload()


# Step 2: Load the dataset
file_name = list(uploaded.keys())[0]  # Automatically gets the uploaded file name
data = pd.read_csv(file_name, encoding='ISO-8859-1')  # Use a safe encoding for non-UTF-8 files

# Step 3: Display the first few rows
print(data.head())

# Step 4: Check column names
print(data.columns)
#Check for missing values in the dataset
print(data.isnull().sum())
# Fill or drop missing values
data = data.dropna()  # Drop rows with missing values (simple approach)
# Alternatively, you can fill missing values for specific columns:
# data['Votes'] = data['Votes'].fillna(data['Votes'].median())
# data['Genre'] = data['Genre'].fillna('Unknown')



# Step 5: Define features and target
features = ['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3', 'Duration', 'Votes']  # Update as necessary
target = 'Rating'

# Extract features (X) and target (y)
X = data[features]
y = data[target]


# Step 6: One-Hot Encoding for categorical features
encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)  # Updated for newer versions of sklearn
X_encoded = encoder.fit_transform(X.select_dtypes(include=['object']))
X_numeric = X.select_dtypes(include=['number']).values
X_processed = np.hstack((X_encoded, X_numeric))

# Step 7: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, random_state=42)

# Step 8: Train the model with optimized settings
model = RandomForestRegressor(n_estimators=50, max_depth=10, random_state=42, n_jobs=-1)
# Monitor training time
start_time = time.time()
model.fit(X_train, y_train)
end_time = time.time()

print(f"Training completed in {end_time - start_time:.2f} seconds")


# Step 9: Evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")
